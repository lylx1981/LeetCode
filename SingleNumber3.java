
    /*
    思路：自己差不多想出来了，大体想法是还是首先对所有数都做异或操作，那么出现2次的都自动消失了，因为2个出现1次的数是两个不同的数，所以它们必定在某些位上是不同的，对于这些不同的位，经过异或操作后必定以1的形式存在（注意，如果两个数在某些位都是1的话，这些位通过异或操作后也是会变成0）。 所以可以对任何一个是1的位进行进一步考察（也就是说两个出现一次的数在这个位上是不同的），所以，可以对所有数组再次根据该位进行判断，分成2组，一组是该位为1，一组该位为0，这样很巧妙的把两个出现一次的数都分到两个不同的Group里了，那么就接下来每个Group里就只剩下一个出现一次的数了，再次对这个组的所有数进行一次异或操作，就得到了那个出现1次的数了，非常巧，自己差不多想出来了。
    
    另外一个人的描述： 这道题其实是很巧妙的利用了Single Number 单独的数字的解法，因为那道解法是可以准确的找出只出现了一次的数字，但前提是其他数字必须出现两次才行。而这题有两个数字都只出现了一次，那么我们如果能想办法把原数组分为两个小数组，不相同的两个数字分别在两个小数组中，这样分别调用Single Number 单独的数字的解法就可以得到答案。那么如何实现呢，首先我们先把原数组全部异或起来，那么我们会得到一个数字，这个数字是两个不相同的数字异或的结果，我们取出其中任意一位为‘1’的位，为了方便起见，我们用 a &= -a 来取出最右端为‘1’的位，然后和原数组中的数字挨个相与，那么我们要求的两个不同的数字就被分到了两个小组中，分别将两个小组中的数字都异或起来，就可以得到最终结果了，
*/

public class Solution {
    public int[] singleNumber(int[] nums) {
        // Pass 1 : 
        // Get the XOR of the two numbers we need to find
        int diff = 0;
        for (int num : nums) {
            diff ^= num;
        }
        // Get its last set bit
        diff &= -diff;
        
        // Pass 2 :
        int[] rets = {0, 0}; // this array stores the two numbers we will return
        for (int num : nums)
        {
            if ((num & diff) == 0) // the bit is not set 依据这个来讲数划分到不同组里
            {
                rets[0] ^= num;
            }
            else // the bit is set
            {
                rets[1] ^= num;
            }
        }
        return rets;
    }
}
